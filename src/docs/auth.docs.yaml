paths:
  /api/auth/login:
    post:
      tags:
        - Auth
      summary: Log in a user
      description: Logs in a user by generating a JWT token and storing it in a cookie.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthDto"
      responses:
        200:
          description: Successfully logged in and token issued.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged in successfully"
        400:
          description: Invalid credentials or missing fields.
        500:
          description: Internal server error.

  /api/auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: Registers a new user in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDto"
      responses:
        200:
          description: Successfully registered.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Registered successfully"
        400:
          description: Invalid data provided.
        500:
          description: Internal server error.

  /api/auth/current:
    get:
      tags:
        - Auth
      summary: Get the current authenticated user
      description: Retrieves information about the currently authenticated user, requires JWT token.
      security:
        - jwt: []
      responses:
        200:
          description: Successfully retrieved current user data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Current user"
                  user:
                    $ref: "#/components/schemas/User"
        401:
          description: Unauthorized, user is not authenticated.
        500:
          description: Internal server error.

  /api/auth/logout:
    get:
      tags:
        - Auth
      summary: Log out a user
      description: Logs out the user by clearing the authentication token cookie, requires JWT token.
      security:
        - jwt: []
      responses:
        200:
          description: Successfully logged out.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully"
        401:
          description: Unauthorized, user is not authenticated.
        500:
          description: Internal server error.

components:
  schemas:
    AuthDto:
      type: object
      properties:
        email:
          type: string
          example: "user@example.com"
        password:
          type: string
          example: "password123"
    UserDto:
      type: object
      properties:
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        email:
          type: string
          example: "john.doe@example.com"
        password:
          type: string
          example: "password123"
    User:
      type: object
      properties:
        id:
          type: string
          example: "123"
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        email:
          type: string
          example: "john.doe@example.com"
        role:
          type: string
          example: "user"
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
