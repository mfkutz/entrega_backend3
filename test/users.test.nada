import { expect } from "chai";
import supertest from "supertest";
import { config } from "../src/config/config.js";
import { userToCreate } from "./data/index.js";

const requester = supertest(`http://localhost:${config.PORT}/api`);

let validJWT;
let userId;

describe("Test Users API's With JWT", () => {
  describe("User Authentication", () => {
    it("Should register a user", async () => {
      const response = await requester.post("/auth/register").send(userToCreate);
      const { _body, statusCode } = response;

      expect(statusCode).to.be.equals(201);
      expect(_body).to.have.property("message", "Registered successfully");

      expect(statusCode).not.to.equal(404);
      expect(_body).not.to.have.property("error", "Unauthorized");
      expect(_body).not.to.have.property("details", "User already exists");
    });

    it("Should log in a user successfully - JWT", async () => {
      let data = { email: "user@test.com", password: "Aa#2345678" };
      const response = await requester.post("/auth/login").send(data);
      const { headers } = response;

      validJWT = headers["set-cookie"][0];

      validJWT = {
        name: validJWT.split("=")[0],
        value: validJWT.split("=")[1].split(";")[0],
      };

      expect(validJWT.name).to.be.equals("token");
      expect(validJWT.value).to.be.ok;

      let current = await requester.get("/auth/current").set("Authorization", `Bearer ${validJWT.value}`);
      const { user } = current._body;
      userId = user._id;
    });
  });

  //Get all
  describe("Testing Endpoints of Users", () => {
    it("Should retrieve all users successfully", async () => {
      const res = await requester.get(`/user/`);
      expect(res.status).to.equal(200);
      expect(res.status).not.to.equal(404);
    });

    it("Should retrieve user details by ID successfully", async () => {
      const res = await requester.get(`/user/${userId}`);
      expect(res.status).to.equal(200);
      expect(res.body).to.include.all.keys(
        "_id",
        "first_name",
        "last_name",
        "email",
        "age",
        "password",
        "role",
        "cart",
        "createdAt",
        "updatedAt"
      );

      expect(res.status).not.to.equal(404);
      expect(res.body).not.to.have.property("message", "User not found");
    });

    it("Should update user details by ID successfully", async () => {
      const res = await requester.put(`/user/${userId}`).send({
        first_name: "user updated",
        last_name: "test",
        age: "20",
      });

      expect(res.status).to.equal(200);
    });

    it("Should delete a user by ID with admin authorization' ", async () => {
      const res = await requester.delete(`/user/${userId}`).set("Authorization", `Bearer ${validJWT.value}`);
      expect(res.status).to.equal(200);
      expect(res.body).to.have.property("message", "User deleted successfully");

      expect(res.status).not.to.equal(404);
      expect(res.body).not.to.have.property("message", "User not found");

      const resCheck = await requester.get(`/user/${userId}`).set("Authorization", `Bearer ${validJWT.value}`);
      expect(resCheck.status).to.equal(404);
      expect(resCheck.body).to.have.property("message", "User not found");
    });
  });
});
